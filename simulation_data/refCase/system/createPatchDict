/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      createPatchDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This application/dictionary controls:
// - optional: create new patches from boundary faces (either given as
//   a set of patches or as a faceSet)
// - always: order faces on coupled patches such that they are opposite. This
//   is done for all coupled faces, not just for any patches created.
// - optional: synchronise points on coupled patches.
// - always: remove zero-sized (non-coupled) patches (that were not added)

// 1. Create cyclic:
// - specify where the faces should come from
// - specify the type of cyclic. If a rotational specify the rotationAxis
//   and centre to make matching easier
// - always create both halves in one invocation with correct 'neighbourPatch'
//   setting.
// - optionally pointSync true to guarantee points to line up.

// 2. Correct incorrect cyclic:
// This will usually fail upon loading:
//  "face 0 area does not match neighbour 2 by 0.0100005%"
//  " -- possible face ordering problem."
// - in polyMesh/boundary file:
//      - loosen matchTolerance of all cyclics to get case to load
//      - or change patch type from 'cyclic' to 'patch'
//        and regenerate cyclic as above

// Do a synchronisation of coupled points after creation of any patches.
// Note: this does not work with points that are on multiple coupled patches
//       with transformations (i.e. cyclics).
pointSync false;

// Optional: Write cyclic matches into .obj format; defaults to false.
writeCyclicMatch  false;

// Patches to create.
patches
(
    // {
    //     name periodic_down;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_up;
    //         matchTolerance 1;
    //     }
    //     constructFrom patches;
    //     patches (periodic_1);
    // }

    // {
    //     name periodic_up;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_down;
    //         matchTolerance 1;
    //     }
    //     constructFrom patches;
    //     patches (periodic_2);
    // }

    // {
    //     name periodic_1;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_2;
    //         matchTolerance 1.0e-3;
    //     }
    //     constructFrom patches;
    //     patches (periodic_1);
    // }

    // {
    //     name periodic_2;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_1;
    //         matchTolerance 1.0e-3;
    //     }
    //     constructFrom patches;
    //     patches (periodic_2);
    // }

    // {
    //     name periodic_velocity_inlet;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_pressure_outlet;
    //         matchTolerance 1.0e-4;
    //     }
    //     constructFrom patches;
    //     patches (velocity_inlet_pre);
    // }

    // {
    //     name periodic_pressure_outlet;
    //     patchInfo
    //     {
    //         // type    patch;
    //         type    cyclic;
    //         neighbourPatch periodic_velocity_inlet;
    //         matchTolerance 1.0e-4;
    //     }
    //     constructFrom patches;
    //     patches (pressure_outlet_pre);
    // }

    {
        name top;
        patchInfo
        {
            // type    patch;
            type    cyclic;
            neighbourPatch bottom;
            matchTolerance 1.0e-3;
        }
        constructFrom patches;
        patches (periodic_top);
    }

    {
        name bottom;
        patchInfo
        {
            // type    patch;
            type    cyclic;
            neighbourPatch top;
            matchTolerance 1.0e-3;
        }
        constructFrom patches;
        patches (periodic_bottom);
    }

    
);

// ************************************************************************* //
